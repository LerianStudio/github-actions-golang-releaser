name: 'GolangReleaser Action'
description: 'A GitHub Action to run GolangReleaser on pull requests'

inputs:
  github_token:
    description: 'GitHub token for API interactions'
    required: true
  lerian_ci_cd_user_name:
    description: 'The name of the user'
    required: true
  lerian_ci_cd_user_email:
    description: 'The email of the user'
    required: true
  lerian_studio_midaz_push_bot_app_id:
    description: 'The App ID for the GitHub App'
    required: true
  lerian_studio_midaz_push_bot_private_key:
    description: 'The private key for the GitHub App'
    required: true
  lerian_ci_cd_user_gpg_key:
    description: 'The GPG key for the user'
    required: true
  lerian_ci_cd_user_gpg_key_password:
    description: 'The password for the GPG key'
    required: true
  
runs:
  using: composite
  steps:
    - name: Create GitHub App Token
      uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.lerian_studio_midaz_push_bot_app_id }}
        private-key: ${{ inputs.lerian_studio_midaz_push_bot_private_key }}
    
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.app-token.outputs.token }}

    - name: Import GPG Key
      if: github.event.pull_request.head.repo.fork == false
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ inputs.lerian_ci_cd_user_gpg_key }}
        passphrase: ${{ inputs.lerian_ci_cd_user_gpg_key_password }}
        git_committer_name: ${{ inputs.lerian_ci_cd_user_name }}
        git_committer_email: ${{ inputs.lerian_ci_cd_user_email }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}